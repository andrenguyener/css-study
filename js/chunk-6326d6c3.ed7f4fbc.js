(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-6326d6c3"],{"43dc":function(e,t,a){"use strict";a.r(t);var i=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},r=[function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("div",{attrs:{id:"inheritance"}},[i("p",[e._v("So, inheritance is a way of propagating property values from parent elements to their children.")]),i("p",[e._v("Once more we have a very simple example here, this time we're going to determine what the line height of the child element will be.")]),i("img",{staticClass:"page-image",attrs:{src:a("7aa9"),alt:""}}),i("p",[e._v("So, start by remembering from our previous lecture that each and every CSS property must have a value; even if neither we the developer nor the browser do specify.")]),i("img",{staticClass:"page-image",attrs:{src:a("70b2"),alt:""}}),i("p",[e._v("In that case there's no cascaded value, right? So when processing a certain property for a certain element such as the line height, the first question that the CSS engine asks is if there is a cascaded value and if so then of course that's the value that's used.")]),i("img",{staticClass:"page-image",attrs:{src:a("53a3"),alt:""}}),i("p",[e._v("Now if there's no cascaded value then the next question is if that property can be inherited and that depends on each property.")]),i("img",{staticClass:"page-image",attrs:{src:a("9dd0"),alt:""}}),i("p",[e._v("There are some properties that are inherited and others are not in the case of line height that property gets inherited as we can see from the property specification.")]),i("img",{staticClass:"page-image",attrs:{src:a("95a2"),alt:""}}),i("p",[e._v("So, if a property is inherited then the value of that property becomes the computed value of its parent element.")]),i("img",{staticClass:"page-image",attrs:{src:a("f138"),alt:""}}),i("p",[e._v("Now it's very important to note that the value that gets inherited is not simply the 150% but the computed value. In this case that's 150% of 20 pixels which is 30 pixels, and so the line height neutral element will also be 30 pixels not 150% of the 25-pixel font size, got it?")]),i("img",{staticClass:"page-image",attrs:{src:a("ae2e"),alt:""}}),i("p",[e._v("\n        So again, it's not simply the declared value that's passed but a computed value. Now if it's a property that's not inherited, like for example padding then the\n        specified value will become the initial value which is also specific to each property. In the case of padding that's just zero pixels.\n    ")]),i("img",{staticClass:"page-image",attrs:{src:a("4f7b"),alt:""}}),i("p",[e._v("Again, you don't need to memorize these initial values because they are all just rather intuitive.")]),i("h2",[e._v("Inheritance: What You Need To Know")]),i("p",[e._v("\n        So just like before here's a quick summary of what you need to know. I guess the most\n        important thing to know about inheritance is that it's there and then it passes the values for some specific properties from parents to children. Again, if you just ignore the jargon,\n        inheritance is actually pretty straightforward. Inheritance allows the developers to write less code and code that will be more maintainable.\n    ")]),i("h3",{staticClass:"list-item"},[e._v("Inheritance passes the value for some specific properties from parents to children â€“ more maintainable code")]),i("p",[e._v("Now in a specification for each and every CSS property you will find if the property is automatically inherited or not. As a rule of thumb properties related to text are inherited. So, properties like font family, font size, color, etc. Other properties like margins or paddings are, of course, not inherited because that would just be extremely impractical. Just imagine setting a margin on some section or something and then suddenly all of the children would automatically get the same margin. That doesn't make any sense, right?")]),i("h3",{staticClass:"list-item"},[e._v("Properties related to text are inherited: font-family, font-size, color, etc.")]),i("p",[e._v("Now it's also important to remember that what gets inherited is the computed value of a property and not the declared value.")]),i("h3",{staticClass:"list-item"},[e._v("The computed value of a property is what gets inherited, not the declared value")]),i("p",[e._v("Also, inheritance of a property, of course, only works if no one neither the developer nor the browser declares a value for their property.")]),i("h3",{staticClass:"list-item"},[e._v("Inheritance of a property only works if no one declares a value for that property")]),i("p",[e._v("Okay, now something else I didn't mention yet is that we can use the inherit keyword to force inheritance of a certain property.")]),i("h3",{staticClass:"list-item"},[e._v("- The inherit keyword forces inheritance on a certain property")]),i("p",[e._v("Also in the same way, the initial keyword can be used to reset a property to the initial value.")]),i("h3",{staticClass:"list-item"},[e._v("The initial keyword resets a property to its initial value")]),i("p",[e._v("That's actually it about inheritance, not hard at all right? Let's move on now.")])])}],n=a("2877"),s={},o=Object(n["a"])(s,i,r,!1,null,null,null);o.options.__file="Inheritance.vue";t["default"]=o.exports},"4f7b":function(e,t,a){e.exports=a.p+"img/inheritance8.bf5ec12a.png"},"53a3":function(e,t,a){e.exports=a.p+"img/inheritance3.4b9d29dd.png"},"70b2":function(e,t,a){e.exports=a.p+"img/inheritance1.664dadb0.png"},"7aa9":function(e,t,a){e.exports=a.p+"img/inheritance0.473c6325.png"},"95a2":function(e,t,a){e.exports=a.p+"img/inheritance5.7a51e374.png"},"9dd0":function(e,t,a){e.exports=a.p+"img/inheritance4.1139c792.png"},ae2e:function(e,t,a){e.exports=a.p+"img/inheritance7.c85217b2.png"},f138:function(e,t,a){e.exports=a.p+"img/inheritance6.f1dfbba0.png"}}]);
//# sourceMappingURL=chunk-6326d6c3.ed7f4fbc.js.map